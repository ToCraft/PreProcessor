/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.tocraft.gradle.preprocess;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.api.tasks.SourceTask;
import org.gradle.api.tasks.compile.JavaCompile;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;

@SuppressWarnings({"unused"})
public class PreProcessorPlugin implements Plugin<Project> {
    @Override
    public void apply(Project project) {
        PreprocessExtension ext = project.getExtensions().create("preprocess", PreprocessExtension.class);

        SourceSetContainer sourceSetContainer = project.getExtensions().findByType(SourceSetContainer.class);
        if (sourceSetContainer != null) {
            sourceSetContainer.configureEach(sourceSet -> {
                var preprocessJava = project.getTasks().register(sourceSet.getTaskName("preprocess", "Java"), PreProcessTask.class);
                preprocessJava.get().getSources().convention(sourceSet.getJava().getSrcDirs());
                preprocessJava.get().getVars().convention(ext.vars);

                SourceTask sourceJavaTask = (SourceTask) project.getTasks().findByName(sourceSet.getTaskName("source", "Java"));
                if (sourceJavaTask != null) {
                    sourceJavaTask.dependsOn(preprocessJava);
                    sourceJavaTask.setSource(preprocessJava.get().getTarget().get());
                }
                JavaCompile javaCompileTask = (JavaCompile) project.getTasks().getByName(sourceSet.getTaskName("compile", "Java"));
                javaCompileTask.dependsOn(preprocessJava);
                javaCompileTask.setSource(preprocessJava.get().getTarget().get());

                project.getTasks().register(sourceSet.getTaskName("applyPreProcess", "Java"), task -> {
                    task.getOutputs().upToDateWhen(a -> false);
                    task.dependsOn(preprocessJava);

                    task.doFirst(t -> {
                        // place file in their original source folder
                        for (File srcFolder : preprocessJava.get().getSources().get()) {
                            final File srcFolderFile = srcFolder.isAbsolute() ? srcFolder : new File(project.getProjectDir(), srcFolder.getPath());
                            Path inBasePath = srcFolderFile.toPath();
                            for (File file : project.fileTree(inBasePath)) {
                                Path relPath = inBasePath.relativize(file.toPath());
                                try (Writer writer = new FileWriter(inBasePath.resolve(relPath).toFile())) {
                                    writer.write(Files.readString(preprocessJava.get().getTarget().get().toPath().resolve(relPath)));
                                } catch (IOException e) {
                                    throw new RuntimeException(e);
                                }
                            }
                        }
                    });
                });
            });
        }
    }
}
