/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.tocraft.gradle.preprocess;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.api.tasks.SourceTask;
import org.gradle.api.tasks.compile.JavaCompile;

@SuppressWarnings({"unused"})
public class PreProcessorPlugin implements Plugin<Project> {
    @Override
    public void apply(Project project) {
        PreprocessExtension ext = project.getExtensions().create("preprocess", PreprocessExtension.class);

        SourceSetContainer sourceSetContainer = project.getExtensions().findByType(SourceSetContainer.class);
        if (sourceSetContainer != null) {
            sourceSetContainer.configureEach(sourceSet -> {
                var preprocessJava = project.getTasks().register(sourceSet.getTaskName("preprocess", "Java"), PreProcessTask.class);
                preprocessJava.get().getSources().convention(sourceSet.getJava().getSrcDirs());
                preprocessJava.get().getVars().convention(ext.vars);

                SourceTask sourceJavaTask = (SourceTask) project.getTasks().findByName(sourceSet.getTaskName("source", "Java"));
                if (sourceJavaTask != null) {
                    sourceJavaTask.dependsOn(preprocessJava);
                    sourceJavaTask.setSource(preprocessJava.get().getTarget().get());
                }
                JavaCompile javaCompileTask = (JavaCompile) project.getTasks().getByName(sourceSet.getTaskName("compile", "Java"));
                javaCompileTask.dependsOn(preprocessJava);
                javaCompileTask.setSource(preprocessJava.get().getTarget().get());

                project.getTasks().register(sourceSet.getTaskName("applyPreProcess", "Java"), ApplyPreProcessTask.class, preprocessJava.get());
            });
        }

        if (!project.getSubprojects().isEmpty()) {
            project.getTasks().register("applyPreProcess").configure(task -> {
                for (Project subproject : project.getSubprojects()) {
                    for (ApplyPreProcessTask subApplyPreProcessTask : subproject.getTasks().withType(ApplyPreProcessTask.class)) {
                        task.dependsOn(subApplyPreProcessTask);
                    }
                }
            });
        }
    }
}
