/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.tocraft.gradle.preprocess;

import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.tasks.Copy;
import org.gradle.api.tasks.SourceSetContainer;
import org.gradle.api.tasks.SourceTask;

import java.io.File;

@SuppressWarnings({"unused"})
public class PreProcessorPlugin implements Plugin<Project> {
    @Override
    public void apply(Project project) {
        PreprocessExtension ext = project.getExtensions().create("preprocess", PreprocessExtension.class);

        SourceSetContainer sourceSetContainer = project.getExtensions().findByType(SourceSetContainer.class);
        if (sourceSetContainer != null) {
            sourceSetContainer.configureEach(sourceSet -> {
                var preprocess = project.getTasks().register(sourceSet.getTaskName("preprocess", "Java"), PreProcessTask.class);
                preprocess.get().getSources().convention(project.files(sourceSet.getJava().getSrcDirs()).getFiles());
                preprocess.get().getVars().convention(ext.vars);

                SourceTask sourceJavaTask = (SourceTask) project.getTasks().findByName(sourceSet.getTaskName("source", "Java"));
                if (sourceJavaTask == null) {
                    sourceJavaTask = (SourceTask) project.getTasks().getByName(sourceSet.getTaskName("compile", "java"));
                }
                sourceJavaTask.dependsOn(preprocess);
                sourceJavaTask.setSource(preprocess.get().getTarget().get());
                //sourceSet.getJava().setSrcDirs(List.of(preprocess.get().getTarget().get()));

                project.getTasks().register(sourceSet.getTaskName("applyPreProcess", "Java"), Copy.class, task -> {
                    task.getOutputs().upToDateWhen(a -> false);
                    task.dependsOn(preprocess);
                    task.from(preprocess.get().getTarget().get());
                    for (File file : preprocess.get().getSources().get()) {
                        task.into(file);
                    }
                });
            });
        }
    }
}
