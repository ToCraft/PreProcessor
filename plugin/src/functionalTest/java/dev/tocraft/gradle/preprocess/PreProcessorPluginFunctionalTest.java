/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.tocraft.gradle.preprocess;

import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.BuildTask;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;

import static org.gradle.internal.impldep.org.junit.Assert.assertEquals;

/**
 * A simple functional test for the 'org.example.greeting' plugin.
 */
class PreProcessorPluginFunctionalTest {
    @TempDir
    File projectDir;

    private File getBuildFile() {
        return new File(projectDir, "build.gradle");
    }

    private File getSettingsFile() {
        return new File(projectDir, "settings.gradle");
    }

    private File getTestJavaFile() {
        return new File(projectDir, "src/main/java/test/Test.java");
    }

    private File getTestKotlinFile() {
        return new File(projectDir, "src/main/kotlin/test/Test.kt");
    }

    private File getTestJsonFile() {
        return new File(projectDir, "src/main/resources/test.json5");
    }

    @Test
    void canApplyPreprocessTask() throws IOException {
        writeString(getSettingsFile(), "");
        writeString(getBuildFile(),
                "plugins {\n" +
                "id('java')\n" +
                "id('org.jetbrains.kotlin.jvm') version '2.0.0'\n" +
                "id('dev.tocraft.preprocessor')\n" +
                "}\n" +
                "preprocess {\n" +
                "vars.put(\"a\", \"1\");\n" +
                "}\n"
        );

        writeString(getTestJavaFile(),
            "package test;\n" +
                    "class Test {\n" +
                    "public void main(String... args) {\n" +
                    "//#if a\n" +
                    "//$$ System.out.println(\"Test succeeded.\");\n" +
                    "//#else\n" +
                    "System.out.println(\"Test failed\");\n" +
                    "//#endif\n" +
                    "}\n" +
                    "}\n"
        );
        writeString(getTestKotlinFile(),
                        "class Test {\n" +
                        "fun main(args : Array<String>) {\n" +
                        "//#if a\n" +
                        "//$$ System.out.println(\"Test succeeded.\");\n" +
                        "//#else\n" +
                        "System.out.println(\"Test failed\");\n" +
                        "//#endif\n" +
                        "}\n" +
                        "}\n"
                );
        writeString(getTestJsonFile(),
                "{\n" +
                        "//#if a\n" +
                        "//$$ \"test\": \"123\"\n" +
                        "//#else\n" +
                        "\"test\": \"456\"\n" +
                        "//#endif\n" +
                        "}\n"
        );

        GradleRunner runner = GradleRunner.create();
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withProjectDir(projectDir);

        // Run the java build
        runner.withArguments("applyPreProcessJava");
        BuildResult javaResult = runner.build();

        // Verify the result
        for (BuildTask task : javaResult.getTasks()) {
            assertEquals(TaskOutcome.SUCCESS, task.getOutcome());
        }
        assertEquals(
                "package test;\n" +
                "class Test {\n" +
                "public void main(String... args) {\n" +
                "//#if a\n" +
                "System.out.println(\"Test succeeded.\");\n" +
                "//#else\n" +
                "//$$ System.out.println(\"Test failed\");\n" +
                "//#endif\n" +
                "}\n" +
                "}\n", new String(Files.readAllBytes(getTestJavaFile().toPath())));

        // Run the kotlin build
        runner.withArguments("applyPreProcessKotlin");
        runner.withProjectDir(projectDir);
        BuildResult kotlinResult = runner.build();

        // Verify the result
        for (BuildTask task : kotlinResult.getTasks()) {
            assertEquals(TaskOutcome.SUCCESS, task.getOutcome());
        }
        assertEquals(
                "class Test {\n" +
                        "fun main(args : Array<String>) {\n" +
                        "//#if a\n" +
                        "System.out.println(\"Test succeeded.\");\n" +
                        "//#else\n" +
                        "//$$ System.out.println(\"Test failed\");\n" +
                        "//#endif\n" +
                        "}\n" +
                        "}\n", new String(Files.readAllBytes(getTestKotlinFile().toPath())));

        // Run the resources build
        runner.withArguments("applyPreProcessResources");
        runner.withProjectDir(projectDir);
        BuildResult resourcesResult = runner.build();

        // Verify the result
        for (BuildTask task : resourcesResult.getTasks()) {
            assertEquals(TaskOutcome.SUCCESS, task.getOutcome());
        }
        assertEquals(
                "{\n" +
                        "//#if a\n" +
                        "\"test\": \"123\"\n" +
                        "//#else\n" +
                        "//$$ \"test\": \"456\"\n" +
                        "//#endif\n" +
                        "}\n", new String(Files.readAllBytes(getTestJsonFile().toPath())));
    }

    private void writeString(File file, String string) throws IOException {
        //noinspection ResultOfMethodCallIgnored
        file.getParentFile().mkdirs();
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
